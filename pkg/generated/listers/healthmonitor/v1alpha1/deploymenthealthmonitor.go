/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.io/sample-controller/pkg/apis/healthmonitor/v1alpha1"
)

// DeploymentHealthMonitorLister helps list DeploymentHealthMonitors.
// All objects returned here must be treated as read-only.
type DeploymentHealthMonitorLister interface {
	// List lists all DeploymentHealthMonitors in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentHealthMonitor, err error)
	// DeploymentHealthMonitors returns an object that can list and get DeploymentHealthMonitors.
	DeploymentHealthMonitors(namespace string) DeploymentHealthMonitorNamespaceLister
	DeploymentHealthMonitorListerExpansion
}

// deploymentHealthMonitorLister implements the DeploymentHealthMonitorLister interface.
type deploymentHealthMonitorLister struct {
	indexer cache.Indexer
}

// NewDeploymentHealthMonitorLister returns a new DeploymentHealthMonitorLister.
func NewDeploymentHealthMonitorLister(indexer cache.Indexer) DeploymentHealthMonitorLister {
	return &deploymentHealthMonitorLister{indexer: indexer}
}

// List lists all DeploymentHealthMonitors in the indexer.
func (s *deploymentHealthMonitorLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentHealthMonitor, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentHealthMonitor))
	})
	return ret, err
}

// DeploymentHealthMonitors returns an object that can list and get DeploymentHealthMonitors.
func (s *deploymentHealthMonitorLister) DeploymentHealthMonitors(namespace string) DeploymentHealthMonitorNamespaceLister {
	return deploymentHealthMonitorNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DeploymentHealthMonitorNamespaceLister helps list and get DeploymentHealthMonitors.
// All objects returned here must be treated as read-only.
type DeploymentHealthMonitorNamespaceLister interface {
	// List lists all DeploymentHealthMonitors in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.DeploymentHealthMonitor, err error)
	// Get retrieves the DeploymentHealthMonitor from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.DeploymentHealthMonitor, error)
	DeploymentHealthMonitorNamespaceListerExpansion
}

// deploymentHealthMonitorNamespaceLister implements the DeploymentHealthMonitorNamespaceLister
// interface.
type deploymentHealthMonitorNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all DeploymentHealthMonitors in the indexer for a given namespace.
func (s deploymentHealthMonitorNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.DeploymentHealthMonitor, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.DeploymentHealthMonitor))
	})
	return ret, err
}

// Get retrieves the DeploymentHealthMonitor from the indexer for a given namespace and name.
func (s deploymentHealthMonitorNamespaceLister) Get(name string) (*v1alpha1.DeploymentHealthMonitor, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("deploymenthealthmonitor"), name)
	}
	return obj.(*v1alpha1.DeploymentHealthMonitor), nil
}
